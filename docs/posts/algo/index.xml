<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithm Notes on CctoctoFX</title>
    <link>https://pillumina.github.io/posts/algo/</link>
    <description>Recent content in Algorithm Notes on CctoctoFX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Dec 2020 10:52:50 +0800</lastBuildDate><atom:link href="https://pillumina.github.io/posts/algo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LC刷题: 字符串专题</title>
      <link>https://pillumina.github.io/posts/algo/string/</link>
      <pubDate>Thu, 08 Apr 2021 18:22:18 +0800</pubDate>
      
      <guid>https://pillumina.github.io/posts/algo/string/</guid>
      <description>14. Longest Common Prefix 返回最长公共前缀子串。原题
Input: [&amp;quot;flower&amp;quot;,&amp;quot;flow&amp;quot;,&amp;quot;flight&amp;quot;] Output: &amp;quot;fl&amp;quot; 水平扫描：
从头开始遍历整个数组，并且两两比较LCP。如果第i次比较的结果是空，则停止迭代返回空字符串；否则就直到遍历结束:
public String longestCommonPrefix(String[] strs){ if (str.length == 0) return &amp;#34;&amp;#34;; String prefix = strs[0]; for (int i = 1; i &amp;lt; strs.length; i++){ while (strs[i].indexOf(prefix) != 0){ prefix = prefix.substring(0, prefix.length() - 1); if (prefix.isEmpty()) return &amp;#34;&amp;#34;; } } return prefix; }  时间复杂度：O(S) 空间复杂度：O(1)  2. 垂直扫描：
水平扫描有个缺点，就是如果很短的string处于数组末尾，那么还是会进行S次比较，性能上差一点。垂直扫描能解决这个问题，也就是比较同一列(每个字符串的每个字符为一列)：
public String longestCommonPrefix(String[] strs){ if (strs == null || strs.length == 0) return &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; strs[0].</description>
    </item>
    
  </channel>
</rss>
